using System;
using System.Collections.Generic;
using System.Numerics;
using System.Text;
using System.Linq;
using System.Diagnostics;

using _calc = MathService.Calculators.Calculator;

namespace ProblemService.Problems
{
    public class Problem_61 : Problem
    {
        //https://projecteuler.net/problem=61 Published on Friday, 16th January 2004, 06:00 pm; Solved by 21802;        Difficulty rating: 20%
        //                                      
        // Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
        //
        // Triangle P3,n = n(n + 1) / 2	 	    1, 3, 6, 10, 15, ...
        // Square P4,n = n^2	 	            1, 4, 9, 16, 25, ...
        // Pentagonal P5,n = n(3n−1) / 2	 	1, 5, 12, 22, 35, ...
        // Hexagonal P6,n = n(2n−1)	 	        1, 6, 15, 28, 45, ...
        // Heptagonal P7,n = n(5n−3) / 2	 	1, 7, 18, 34, 55, ...
        // Octagonal P8,n = n(3n−2)	 	        1, 8, 21, 40, 65, ...
        // 
        // The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
        //
        //     1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number(including the last number with the first).
        //     2. Each polygonal type: triangle(P3,127=8128), square(P4,91=8281), and pentagonal(P5,44=2882), is represented by a different number in the set.
        //     3. This is the only set of 4-digit numbers with this property.
        //
        // Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: 
        // triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

        public override object RunProblem(double x, double y = 0, double z = 0)
        {
            var max = (int)x;

            // all trinagle 4-dig numbers
            var triNums = new Dictionary<string, List<string>>();
            var triStart = 46;
            for (var i = triStart; i <= 140; i++)
            {
                var num = (i * (i + 1) / 2).ToString();
                var num_head = num.Substring(0, 2);
                var num_tail = num.Substring(2, 2);
                if (triNums.ContainsKey(num_head))
                    triNums[num_head].Add(num_tail);
                else
                    triNums.Add(num_head, new List<string>() { num_tail });
            }

            // all square 4-dig numbers
            var sqNums = new Dictionary<string, List<string>>();
            var sqStart = 32;
            for (var i = sqStart; i <= 100; i++)
            {
                var num = (i * i).ToString();
                var num_head = num.Substring(0, 2);
                var num_tail = num.Substring(2, 2);
                if (sqNums.ContainsKey(num_head))
                    sqNums[num_head].Add(num_tail);
                else
                    sqNums.Add(num_head, new List<string>() { num_tail });
            }

            // all pentagonal 4-dig numbers
            var pentNums = new Dictionary<string, List<string>>();
            var pentStart = 26;
            for (var i = pentStart; i <= 81; i++)
            {
                var num = ((3 * i * i - i) / 2).ToString();
                var num_head = num.Substring(0, 2);
                var num_tail = num.Substring(2, 2);
                if (pentNums.ContainsKey(num_head))
                    pentNums[num_head].Add(num_tail);
                else
                    pentNums.Add(num_head, new List<string>() { num_tail });
            }

            // all hexagonal 4-dig numbers
            var hexNums = new Dictionary<string, List<string>>();
            var hexStart = 23;
            for (var i = hexStart; i <= 70; i++)
            {
                var num = (2 * i * i - i).ToString();
                var num_head = num.Substring(0, 2);
                var num_tail = num.Substring(2, 2);
                if (hexNums.ContainsKey(num_head))
                    hexNums[num_head].Add(num_tail);
                else
                    hexNums.Add(num_head, new List<string>() { num_tail });
            }

            // all heptagonal 4-dig numbers
            var heptNums = new Dictionary<string, List<string>>();
            var heptStart = 21;
            for (var i = heptStart; i <= 63; i++)
            {
                var num = ((5 * i * i - 3 * i) / 2).ToString();
                var num_head = num.Substring(0, 2);
                var num_tail = num.Substring(2, 2);
                if (heptNums.ContainsKey(num_head))
                    heptNums[num_head].Add(num_tail);
                else
                    heptNums.Add(num_head, new List<string>() { num_tail });
            }

            // all octagonal 4-dig numbers
            var octNums = new Dictionary<string, List<string>>();
            var octStart = 19;
            for (var i = octStart; i <= 58; i++)
            {
                var num = (3 * i * i - 2 * i).ToString();
                var num_head = num.Substring(0, 2);
                var num_tail = num.Substring(2, 2);
                if (octNums.ContainsKey(num_head))
                    octNums[num_head].Add(num_tail);
                else
                    octNums.Add(num_head, new List<string>() { num_tail });
            }

            var numDicts = new List<Dictionary<string, List<string>>>() { triNums, sqNums, pentNums, hexNums, heptNums, octNums };
            var perms = _calc.GenAllPermutations(6);

            foreach(var p in perms)
                foreach(var d1 in numDicts[p[0]])
                    foreach(var d1_tail in d1.Value)
                        if(numDicts[p[1]].TryGetValue(d1_tail, out var d2_tails))
                            foreach(var d2_tail in d2_tails)
                                if (numDicts[p[2]].TryGetValue(d2_tail, out var d3_tails))
                                    foreach (var d3_tail in d3_tails)
                                        if (numDicts[p[3]].TryGetValue(d3_tail, out var d4_tails))
                                            foreach (var d4_tail in d4_tails)
                                                if (numDicts[p[4]].TryGetValue(d4_tail, out var d5_tails))
                                                    foreach (var d5_tail in d5_tails)
                                                        if (numDicts[p[5]].TryGetValue(d5_tail, out var d6_tails))
                                                            foreach (var d6_tail in d6_tails)
                                                                if (d6_tail == d1.Key)
                                                                    return new { result = $"{p[0]}::{d1.Key}=>{d1_tail}=>{d2_tail}=>{d3_tail}=>{d4_tail}=>{d5_tail}=>{d6_tail}" };

            return new { result = 0 };
        }


    }    
}
